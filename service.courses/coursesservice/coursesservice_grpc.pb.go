// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package coursesservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoursesServiceClient is the client API for CoursesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoursesServiceClient interface {
	// courses
	AddCourse(ctx context.Context, in *AddCourseReq, opts ...grpc.CallOption) (*AddCourseResp, error)
	UpdateCourse(ctx context.Context, in *UpdateCourseReq, opts ...grpc.CallOption) (*UpdateCourseResp, error)
	DeleteCourse(ctx context.Context, in *DeleteCourseReq, opts ...grpc.CallOption) (*DeleteCourseResp, error)
	GetCourse(ctx context.Context, in *GetCourseReq, opts ...grpc.CallOption) (*GetCourseResp, error)
	GetAllCourses(ctx context.Context, in *GetAllCoursesReq, opts ...grpc.CallOption) (*GetAllCoursesResp, error)
	// TaskHeaders
	AddTaskHeader(ctx context.Context, in *AddTaskHeaderReq, opts ...grpc.CallOption) (*AddTaskHeaderResp, error)
	UpdateTaskHeader(ctx context.Context, in *UpdateTaskHeaderReq, opts ...grpc.CallOption) (*UpdateTaskHeaderResp, error)
	DeleteTaskHeader(ctx context.Context, in *DeleteTaskHeaderReq, opts ...grpc.CallOption) (*DeleteTaskHeaderResp, error)
	// Tasks
	AddTask(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*AddTaskResp, error)
	UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*UpdateTaskResp, error)
	DeleteTask(ctx context.Context, in *DeleteTaskReq, opts ...grpc.CallOption) (*DeleteTaskResp, error)
}

type coursesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoursesServiceClient(cc grpc.ClientConnInterface) CoursesServiceClient {
	return &coursesServiceClient{cc}
}

func (c *coursesServiceClient) AddCourse(ctx context.Context, in *AddCourseReq, opts ...grpc.CallOption) (*AddCourseResp, error) {
	out := new(AddCourseResp)
	err := c.cc.Invoke(ctx, "/CoursesService/AddCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) UpdateCourse(ctx context.Context, in *UpdateCourseReq, opts ...grpc.CallOption) (*UpdateCourseResp, error) {
	out := new(UpdateCourseResp)
	err := c.cc.Invoke(ctx, "/CoursesService/UpdateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) DeleteCourse(ctx context.Context, in *DeleteCourseReq, opts ...grpc.CallOption) (*DeleteCourseResp, error) {
	out := new(DeleteCourseResp)
	err := c.cc.Invoke(ctx, "/CoursesService/DeleteCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) GetCourse(ctx context.Context, in *GetCourseReq, opts ...grpc.CallOption) (*GetCourseResp, error) {
	out := new(GetCourseResp)
	err := c.cc.Invoke(ctx, "/CoursesService/GetCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) GetAllCourses(ctx context.Context, in *GetAllCoursesReq, opts ...grpc.CallOption) (*GetAllCoursesResp, error) {
	out := new(GetAllCoursesResp)
	err := c.cc.Invoke(ctx, "/CoursesService/GetAllCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) AddTaskHeader(ctx context.Context, in *AddTaskHeaderReq, opts ...grpc.CallOption) (*AddTaskHeaderResp, error) {
	out := new(AddTaskHeaderResp)
	err := c.cc.Invoke(ctx, "/CoursesService/AddTaskHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) UpdateTaskHeader(ctx context.Context, in *UpdateTaskHeaderReq, opts ...grpc.CallOption) (*UpdateTaskHeaderResp, error) {
	out := new(UpdateTaskHeaderResp)
	err := c.cc.Invoke(ctx, "/CoursesService/UpdateTaskHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) DeleteTaskHeader(ctx context.Context, in *DeleteTaskHeaderReq, opts ...grpc.CallOption) (*DeleteTaskHeaderResp, error) {
	out := new(DeleteTaskHeaderResp)
	err := c.cc.Invoke(ctx, "/CoursesService/DeleteTaskHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) AddTask(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*AddTaskResp, error) {
	out := new(AddTaskResp)
	err := c.cc.Invoke(ctx, "/CoursesService/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*UpdateTaskResp, error) {
	out := new(UpdateTaskResp)
	err := c.cc.Invoke(ctx, "/CoursesService/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coursesServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskReq, opts ...grpc.CallOption) (*DeleteTaskResp, error) {
	out := new(DeleteTaskResp)
	err := c.cc.Invoke(ctx, "/CoursesService/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoursesServiceServer is the server API for CoursesService service.
// All implementations must embed UnimplementedCoursesServiceServer
// for forward compatibility
type CoursesServiceServer interface {
	// courses
	AddCourse(context.Context, *AddCourseReq) (*AddCourseResp, error)
	UpdateCourse(context.Context, *UpdateCourseReq) (*UpdateCourseResp, error)
	DeleteCourse(context.Context, *DeleteCourseReq) (*DeleteCourseResp, error)
	GetCourse(context.Context, *GetCourseReq) (*GetCourseResp, error)
	GetAllCourses(context.Context, *GetAllCoursesReq) (*GetAllCoursesResp, error)
	// TaskHeaders
	AddTaskHeader(context.Context, *AddTaskHeaderReq) (*AddTaskHeaderResp, error)
	UpdateTaskHeader(context.Context, *UpdateTaskHeaderReq) (*UpdateTaskHeaderResp, error)
	DeleteTaskHeader(context.Context, *DeleteTaskHeaderReq) (*DeleteTaskHeaderResp, error)
	// Tasks
	AddTask(context.Context, *AddTaskReq) (*AddTaskResp, error)
	UpdateTask(context.Context, *UpdateTaskReq) (*UpdateTaskResp, error)
	DeleteTask(context.Context, *DeleteTaskReq) (*DeleteTaskResp, error)
	mustEmbedUnimplementedCoursesServiceServer()
}

// UnimplementedCoursesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoursesServiceServer struct {
}

func (UnimplementedCoursesServiceServer) AddCourse(context.Context, *AddCourseReq) (*AddCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourse not implemented")
}
func (UnimplementedCoursesServiceServer) UpdateCourse(context.Context, *UpdateCourseReq) (*UpdateCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedCoursesServiceServer) DeleteCourse(context.Context, *DeleteCourseReq) (*DeleteCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourse not implemented")
}
func (UnimplementedCoursesServiceServer) GetCourse(context.Context, *GetCourseReq) (*GetCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedCoursesServiceServer) GetAllCourses(context.Context, *GetAllCoursesReq) (*GetAllCoursesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCourses not implemented")
}
func (UnimplementedCoursesServiceServer) AddTaskHeader(context.Context, *AddTaskHeaderReq) (*AddTaskHeaderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskHeader not implemented")
}
func (UnimplementedCoursesServiceServer) UpdateTaskHeader(context.Context, *UpdateTaskHeaderReq) (*UpdateTaskHeaderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskHeader not implemented")
}
func (UnimplementedCoursesServiceServer) DeleteTaskHeader(context.Context, *DeleteTaskHeaderReq) (*DeleteTaskHeaderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskHeader not implemented")
}
func (UnimplementedCoursesServiceServer) AddTask(context.Context, *AddTaskReq) (*AddTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedCoursesServiceServer) UpdateTask(context.Context, *UpdateTaskReq) (*UpdateTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedCoursesServiceServer) DeleteTask(context.Context, *DeleteTaskReq) (*DeleteTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedCoursesServiceServer) mustEmbedUnimplementedCoursesServiceServer() {}

// UnsafeCoursesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoursesServiceServer will
// result in compilation errors.
type UnsafeCoursesServiceServer interface {
	mustEmbedUnimplementedCoursesServiceServer()
}

func RegisterCoursesServiceServer(s grpc.ServiceRegistrar, srv CoursesServiceServer) {
	s.RegisterService(&CoursesService_ServiceDesc, srv)
}

func _CoursesService_AddCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).AddCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursesService/AddCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).AddCourse(ctx, req.(*AddCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursesService/UpdateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).UpdateCourse(ctx, req.(*UpdateCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_DeleteCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).DeleteCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursesService/DeleteCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).DeleteCourse(ctx, req.(*DeleteCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursesService/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).GetCourse(ctx, req.(*GetCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_GetAllCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCoursesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).GetAllCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursesService/GetAllCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).GetAllCourses(ctx, req.(*GetAllCoursesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_AddTaskHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskHeaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).AddTaskHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursesService/AddTaskHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).AddTaskHeader(ctx, req.(*AddTaskHeaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_UpdateTaskHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskHeaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).UpdateTaskHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursesService/UpdateTaskHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).UpdateTaskHeader(ctx, req.(*UpdateTaskHeaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_DeleteTaskHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskHeaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).DeleteTaskHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursesService/DeleteTaskHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).DeleteTaskHeader(ctx, req.(*DeleteTaskHeaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursesService/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).AddTask(ctx, req.(*AddTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursesService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).UpdateTask(ctx, req.(*UpdateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoursesService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoursesServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoursesService/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoursesServiceServer).DeleteTask(ctx, req.(*DeleteTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CoursesService_ServiceDesc is the grpc.ServiceDesc for CoursesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoursesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CoursesService",
	HandlerType: (*CoursesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCourse",
			Handler:    _CoursesService_AddCourse_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _CoursesService_UpdateCourse_Handler,
		},
		{
			MethodName: "DeleteCourse",
			Handler:    _CoursesService_DeleteCourse_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _CoursesService_GetCourse_Handler,
		},
		{
			MethodName: "GetAllCourses",
			Handler:    _CoursesService_GetAllCourses_Handler,
		},
		{
			MethodName: "AddTaskHeader",
			Handler:    _CoursesService_AddTaskHeader_Handler,
		},
		{
			MethodName: "UpdateTaskHeader",
			Handler:    _CoursesService_UpdateTaskHeader_Handler,
		},
		{
			MethodName: "DeleteTaskHeader",
			Handler:    _CoursesService_DeleteTaskHeader_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _CoursesService_AddTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _CoursesService_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _CoursesService_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coursesservice/coursesservice.proto",
}
